@using Newtonsoft.Json;

@model IndustriaComercio.Models.Model.DeclaracionPreviaModel
<!DOCTYPE html>
<html lang="es-co">
<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Declaracion</title>

    <!-- Bootstrap core CSS-->
    @Styles.Render("~/bundles/css")
    @{
        Layout = null;
    }
</head>

<body id="page-top">
    <div class="container" id="app">
        <div class="row">
            <div class="col">

                &nbsp;

                <center>
                    <img src="~/Content/Images/logo-alcaldia.png">
                </center>

                &nbsp;
            </div>
        </div>
        @using (Html.BeginForm())
        {
            <div class="row " style="height:50vh;overflow:auto;">
                @*<div class="col-md-1 d-none d-lg-block"></div>*@
                <div class="col">

                    @Html.Partial("Partial/_DeclaracionForm1")
                    @Html.Partial("Partial/_DeclaracionForm2")
                    @Html.Partial("Partial/_DeclaracionForm3")
                    @Html.Partial("Partial/_DeclaracionForm4")
                    @Html.Partial("Partial/_DeclaracionForm5")
                    @Html.Partial("Partial/_DeclaracionForm6")
                    @Html.Partial("Partial/_DeclaracionForm7")
                    @Html.Partial("Partial/_DeclaracionForm8")
                    @Html.Partial("Partial/_DeclaracionForm9")

                </div>
                @*<div class="col-md-1 d-none d-lg-block"></div>*@
            </div>

            <div class="form-group row mt-3">
                @*<div class="col-md-1 d-none d-lg-block"></div>*@
                <div class="col text-left">
                    <button type="button"
                            class="btn btn-outline-info"
                            v-on:click="vistaAnterior"
                            v-show="verBotonAtras">
                        Atrás
                    </button>
                </div>
                <div class="col text-center">
                    <button type="submit"
                            class="btn btn-success"
                            v-show="verBotonGuardar">
                        Guardar
                    </button>
                </div>
                <div class="col text-right">
                    <button type="button"
                            class="btn btn-outline-primary"
                            v-on:click="vistaSiguiente"
                            v-show="verBotonAdelante">
                        Adelante
                    </button>
                </div>
                @*<div class="col-md-1 d-none d-lg-block"></div>*@
            </div>
        }

    </div>

    <!-- Bootstrap core JavaScript-->
    @Scripts.Render("~/bundles/js")
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="~/Content/vendor/vue/vue-mask/vue-the-mask.js"></script>*@
    @*<script src="~/Content/vendor/vue/vue-mask/di-vue-mask.js"></script>*@


    <script>
        //Vue.use(VueMask);
        numeral.locale('es');


        var vm = new Vue({
            el: '#app',
            data: {
                vista: 1,
                limiteInferiorVista: 1,
                limiteSuperiorVista: 9,

                actividades: JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.ActividadesGravadas))'),
                cliente: {
                    ClasificacionContribuyente: '@Model.Cliente.ClasificacionContribuyenteNombre',
                    Correo: '@Model.Cliente.Correo',
                    Departamento: '@Model.Cliente.Departamento',
                    Direccion: '@Model.Cliente.Direccion',
                    Municipio: '@Model.Cliente.Municipio',
                    NombreCompleto: '@Model.Cliente.NombreCompleto',
                    NumeroEstablecimientos: @Model.Cliente.NumeroEstablecimientos,
                    Telefono: '@Model.Cliente.Telefono'
                },
                form: {
                    AnticipoAnioAnterior: (@Model.AnticipoAnioAnterior),
                    AnticipoAnioSiguiente: (@Model.AnticipoAnioSiguiente),
                    AutoretencionesDelMunicipio: (@Model.AutoretencionesDelMunicipio),
                    CapacidadInstalada: (@Model.CapacidadInstalada),
                    DescuentoProntoPago: (@Model.Descuento),
                    IngresosActividadesExentas: (@Model.IngresosActividadesExentas),
                    IngresosActivosFijos: (@Model.IngresosActivosFijos),
                    IngresosDevoluciones: (@Model.IngresosDevoluciones),
                    IngresosEnElPais: (@Model.IngresosEnElPais),
                    IngresosExportaciones: (@Model.IngresosExportaciones),
                    IngresosFueraDelMunicipio: (@Model.IngresosFueraDelMunicipio),
                    IngresosNoGravados: (@Model.IngresosNoGravados),
                    InteresesDeMora: (@Model.Interes),
                    NoIdentificacion: '@Model.NoIdentificacion',
                    PagaAvisoTablero: @(Model.PagaAvisoTablero ? "true" : "false"),
                    PagoUnidadesComerciales: (@Model.PagoUnidadesComerciales),
                    PersonaId: @Model.PersonaId,
                    PorcentajeDescuento: @Model.PorcentajeDescuento,
                    PorcentajeInteres: @Model.PorcentajeInteres,
                    RetencionesDelMunicipio: (@Model.RetencionesDelMunicipio),
                    SaldoFavorPeriodoAnterior: (@Model.SaldoFavorPeriodoAnterior),
                    SobretasaBomberil: (@Model.SobretasaBomberil),
                    SobretasaSeguridad: (@Model.SobretasaSeguridad),
                    TienePagoVoluntario: @Model.TienePagoVoluntario.ToString().ToLower(),
                    TipoContribuyenteId: (@Model.TipoContribuyenteId),
                    TipoDeclaracion: '@Model.TipoDeclaracion',
                    TipoDocumentoId: (@Model.TipoDocumentoId),
                    TipoSancion: '@Model.TipoSancion',
                    ValorExoneracionImpuesto: (@Model.ValorExoneracionImpuesto),
                    ValorPagar: (@Model.ValorPagar),
                    ValorSancion: (@Model.ValorSancion),
                },

                // swap
                selectActividad: null,
                searchActividad: ''
            },
            mounted() {
                for (let i in this.actividades) {
                    this.actividades[i].Descripcion = this.listaActividadesGravadas.find(x => x.Key === this.actividades[i].ActividadId).Value;
                }
            },
            computed: {
                verBotonAtras() {
                    return this.vista > this.limiteInferiorVista;
                },
                verBotonAdelante() {
                    //if (this.vista === 2 && !this.tieneNoDocumento)
                    //    return false;
                    return this.vista < this.limiteSuperiorVista;
                },
                verBotonGuardar() {
                    return this.vista == this.limiteSuperiorVista;
                },
                tieneNoDocumento() {
                    return this.form.PersonaId !== 0;
                },
                listaActividadesGravadas() {
                    return JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.ListaActividadesGravadas))');
                },
                listaTipoSanciones() {
                    return JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.ListaTipoSanciones))');
                },
                listaTipoDocumento() {
                    return JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.TipoDocumentos))');
                },
                TotalIngresosMunicipio() {
                    return this.form.IngresosEnElPais - this.form.IngresosFueraDelMunicipio;
                },
                TotalIngresosGravables() {
                    return (
                        (((((this.TotalIngresosMunicipio
                            - this.form.IngresosDevoluciones)
                            - this.form.IngresosExportaciones)
                            - this.form.IngresosActivosFijos)
                            - this.form.IngresosNoGravados)
                            - this.form.IngresosActividadesExentas)
                    );
                },
                TotaImpuestoEnergiaElectrica() {
                    return this.form.CapacidadInstalada * 5;
                },
                totalActividadesImpuesto() {
                    var totalImpuesto = 0;
                    for (var x in this.actividades) {
                        totalImpuesto += parseInt(this.actividades[x].Impuesto);
                    }
                    return totalImpuesto;
                },
                TotalIngresosGravablesPorActividades() {
                    var totalImpuesto = 0;
                    for (var x in this.actividades) {
                        totalImpuesto += parseInt(this.actividades[x].IngresosGravados);
                    }
                    return totalImpuesto;
                },
                TotalImpuestoIndustriaComercio() {
                    return this.totalActividadesImpuesto + this.TotaImpuestoEnergiaElectrica;
                },
                ImpuestoAvisosTableros() {
                    if (this.form.PagaAvisoTablero)
                        return Math.round(this.TotalImpuestoIndustriaComercio * 0.00015) * 1000;
                    return this.TotalImpuestoIndustriaComercio;
                },
                TotalImpuestoCargo() {
                    return (this.TotalImpuestoIndustriaComercio
                        + this.ImpuestoAvisosTableros
                        + parseInt(this.form.PagoUnidadesComerciales)
                        + parseInt(this.form.SobretasaBomberil)
                        + parseInt(this.form.SobretasaSeguridad));
                },
                totalValorSancion() {
                    var key = this.form.TipoSancionId;
                    var valor = this.listaTipoSanciones.find(x => x.Key == key);
                    if (valor == null) {
                        return 0
                    }
                    return this.TotalImpuestoCargo * (valor.PorcentajeSancion * 0.01)
                },
                TotalSaldoCargo() {
                    return (((((((this.TotalImpuestoCargo
                        - parseInt(this.form.ValorExoneracionImpuesto))
                        - parseInt(this.form.RetencionesDelMunicipio))
                        - parseInt(this.form.AutoretencionesDelMunicipio))
                        - parseInt(this.form.AnticipoAnioAnterior))
                        + parseInt(this.form.AnticipoAnioSiguiente))
                        + parseInt(this.totalValorSancion))
                        - parseInt(this.form.SaldoFavorPeriodoAnterior));
                },
                TotalSaldoFavor() {
                    return this.TotalSaldoCargo < 0 ? Math.abs(this.TotalSaldoFavor) : 0;
                },
                TotalDescuentoSaldo() {
                    return this.TotalSaldoCargo * this.form.PorcentajeDescuento;
                },
                TotalInteresSaldo() {
                    return this.TotalSaldoCargo * this.form.PorcentajeInteres;
                },
                TotalPagar() {
                    return ((parseInt(this.TotalSaldoCargo) + this.TotalDescuentoSaldo)
                        - this.TotalInteresSaldo);
                },
                listaActividadesASeleccionar() {
                    return this.listaActividadesGravadas
                        .filter(
                        x =>
                            this.actividades
                                .filter(y => y.ActividadId == x.ActividadId).length === 0
                            && x.Descripcion.toLowerCase().indexOf(this.searchActividad.toLowerCase()) > -1
                        );
                }
            },
            filters: {
                formatPrecio(value) {

                    var precio = numeral(value).format("$0,0");
                    return precio;
                }
            },
            methods: {
                vistaAnterior() {
                    if (this.vista > this.limiteInferiorVista)
                        this.vista--;
                },
                vistaSiguiente() {
                    if (this.vista < this.limiteSuperiorVista)
                        this.vista++;
                },
                calcularNameActividades(x, campo) {
                    return `ActividadesGravadas[${x}].${campo}`;
                },
                anadirActividades(objActividad) {
                    if (objActividad.ActividadId === 0) {
                        // debe seleccionar una actividad
                        return;
                    }
                    this.actividades.push(
                        {
                            ActividadId: objActividad.ActividadId,
                            Descripcion: objActividad.Descripcion,
                            IngresosGravados: this.TotalIngresosGravables - this.totalActividadesImpuesto,
                            Tarifa: objActividad.Tarifa,
                            Impuesto: ((this.TotalIngresosGravables - this.totalActividadesImpuesto)
                                * objActividad.Tarifa) / 1000
                        }
                    );
                    $('#modalActividad').modal('hide');
                },
                getClienteByNoDocumento(tipoDocumento, noDocumento) {
                    if (tipoDocumento === 0 || noDocumento.lenght === 0) {
                        // Mostrar Alerta
                        return;
                    }
                
                    $.get(`Cliente/GetClienteByNoDocumento/${tipoDocumento}/${noDocumento}`)
                        .done(function(x) {
                            if (x === null) {
                                // Mostrar Alerta
                                Swal.fire(
                                    'Advertencia',
                                    "El No. Documento Ingresado no se encuentra en el sistema",
                                    'warning'
                                );
                                return;
                            }
                            let cliente = x;
                            // Llenar TODOS los datos de Cliente
                            this.form.PersonaId == cliente.PersonaId
                            this.cliente = {
                                ClasificacionContribuyente: cliente.ClasificacionContribuyenteNombre,
                                Correo: cliente.Correo,
                                Departamento: cliente.Departamento,
                                Direccion: cliente.Direccion,
                                Municipio: cliente.Municipio,
                                NombreCompleto: cliente.NombreCompleto,
                                NumeroEstablecimientos: cliente.NumeroEstablecimientos,
                                Telefono: cliente.Telefono
                            }
                        }
                    ).fail(function (x) {
                        Swal.fire(
                            'Error',
                            "Error Irrecuperable en el sistema",
                            'error'
                        );
                        console.error(x);
                    });
                }
            }
        });

    </script>

    <script>
        $(function () {
            $('[data-toggle="popover"]').popover({
                trigger: 'focus'
            })
        })
    </script>
</body>

</html>