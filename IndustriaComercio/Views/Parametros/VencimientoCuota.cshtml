
<div class="container" id="app">


    <div class="row mb-5">
        <div class="col-sm-8">
            <h2>Parametrizar Vencimiento Cuota</h2>
        </div>
        <div class="col-sm-4 float-right">
            <div class="">
                <button class="btn btn-primary" type="button" v-on:click="agregar">Añadir</button>
            </div>
        </div>
    </div>

    <vencimiento-cuota-input v-for="(item, i) in parametros" v-bind:data="item" v-bind:index="i" v-bind:meses-elegidos="mesesElegidos">
    </vencimiento-cuota-input>


    <div class="row float-right">
        <button type="button" class="btn btn-success" v-on:click="guardar" v-bind:disabled="!puedeGuardar">Guardar</button>
    </div>

</div>


<template id="vencimiento-cuota-input-template">

    <div class="row mb-3">
        <template v-if="!estaEditando">
            <div class="col-sm-6 text-right">
                <label class="form-label-group"><strong>Mes:</strong> {{ mesElegidoStr }}, <strong>Dia:</strong> {{ data.Dia }}</label>
            </div>

            <div class="col-sm-4 align-self-end">
                <div class="btn-group" role="group" aria-label="Basic example">
                    <button type="button" class="btn btn-primary" v-on:click="editar">
                        <i class="fa fa-edit fa-fw"></i>
                    </button>
                    <button type="button" class="btn btn-danger" v-on:click="eliminar">
                        <i class="fa fa-trash fa-fw"></i>
                    </button>

                </div>
            </div>
        </template>

        <template v-if="estaEditando">

            <!-- Mes Elegido -->
            <div class="col-sm-4">
                <label class="form-label-group">Mes:</label>
                <select class="form-control" v-model="mesElegido">
                    <option v-bind:value="null">-- Seleccione --</option>
                    <option v-for="(item, i) of meses" v-bind:value="(i + 1)">{{ item }}</option>
                </select>
            </div>

            <!-- Dia Elegido -->
            <div class="col-sm-4">
                <label class="form-label-group">Dia:</label>
                <select class="form-control" v-model="diaElegido">
                    <option v-bind:value="null">-- Seleccione --</option>
                    <option v-for="(item, i) of dias" v-bind:value="(i + 1)">{{ item }}</option>
                </select>
            </div>

            <!-- Acciones -->
            <div class="col-sm-4 align-self-end">
                <div class="btn-group" role="group" aria-label="Basic example">
                    <button type="button" class="btn btn-success" v-on:click="guardar">
                        <i class="fa fa-compact-disc fa-fw"></i>
                    </button>
                    <button type="button" class="btn btn-warning" v-on:click="cancelar">
                        <i class="fa fa-times fa-fw"></i>
                    </button>
                </div>
            </div>
        </template>
    </div>

</template>


@section scripts{
    <script>

        Vue.component("vencimiento-cuota-input", {
            props: {
                data: {
                    type: Object,
                    required: true
                },
                index: {
                    type: Number,
                    required: true
                },
                mesesElegidos: {
                    type: Array,
                    required: true
                }
            },
            template: "#vencimiento-cuota-input-template",
            created() {
                if (!this.data.Mes) {
                    this.estaEditando = true;
                } else {
                    this.estaEditando = false;
                }
            },
            data() {
                return {
                    estaEditando: true,
                    meses: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                    mesElegido: this.data.Mes,
                    diaElegido: this.data.Dia
                }
            },
            watch: {
                mesElegido(val) {
                    this.diaElegido = null;
                    if (val && this.mesesElegidos.filter(x => x !== this.data.Mes).find(x => x == val)) {
                        Swal.fire('Advertencia', `El mes "${this.meses[(val - 1)]}" ya se encuentra configurado`, 'warning');
                        this.mesElegido = null;
                    }
                }
            },
            computed: {
                dias() {
                    if (!this.mesElegido) {
                        return [];
                    } else if (this.mesElegido == 1 || this.mesElegido == 3 || this.mesElegido == 5 || this.mesElegido == 7 || this.mesElegido == 8 || this.mesElegido == 10 || this.mesElegido == 12) {
                        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
                    } else if (this.mesElegido == 2) {
                        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28];
                    } else {
                        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];
                    }
                },
                mesElegidoStr() {
                    if (this.data.Mes)
                        return this.meses[this.data.Mes - 1];
                    return "";
                }
            },
            methods: {
                editar() {
                    this.mesElegido = this.data.Mes;
                    this.diaElegido = this.data.Dia;
                    this.estaEditando = true;
                },
                eliminar() {
                    eventHub.$emit('vencimiento-cuota-input:eliminar', this.index);
                },
                cancelar() {
                    this.estaEditando = false;
                    if (!this.data.Mes) {
                        this.eliminar();
                    }
                },
                guardar() {
                    if (this.mesElegido === null || this.diaElegido === null) {
                        Swal.fire('Advertencia', "Debe diligenciar todos los campos", 'warning');
                        return;
                    }
                    const obj = {
                        index: this.index,
                        Mes: this.mesElegido,
                        Dia: this.diaElegido,
                        ParametroVencimientoId: this.data.ParametroVencimientoId,
                    };
                    eventHub.$emit('vencimiento-cuota-input:agregar', obj);
                    this.estaEditando = false;
                }
            }
        });


        var vm = new Vue({
            el: '#app',
            data: {
                parametros: [],
                puedeGuardar: false
            },
            created() {
                eventHub.$on('vencimiento-cuota-input:agregar', this.agregarParametro);
                eventHub.$on('vencimiento-cuota-input:eliminar', this.eliminarParametro);
                this.init();
            },
            computed: {
                mesesElegidos() {
                    return this.parametros.map(x => x.Mes);
                }
            },
            methods: {
                init() {
                    axios.get(`/Parametros/ObtenerTodos`)
                        .then(res => { this.parametros = res.data; if (this.parametros.length > 0) this.puedeGuardar = true; })
                        .catch(e => console.error(e));
                },
                setPuedeGuardar() {
                    if (this.parametros.length > 0)
                        this.puedeGuardar = true;
                },
                agregar() {
                    if (this.parametros.length < 6) {
                        this.parametros.push({ Mes: null, Dia: null });
                        this.puedeGuardar = false;
                    } else
                        Swal.fire('Advertencia', "Máximo parámetros configurados", 'warning');
                },
                agregarParametro(obj) {
                    this.eliminarParametro(obj.index);
                    this.parametros.splice(obj.index, 0, obj);
                },
                eliminarParametro(index) {
                    this.parametros.splice(index, 1);
                    this.setPuedeGuardar();
                },
                guardar() {
                    if (this.parametros.length == 0) {
                        Swal.fire('Advertencia', "Al menos ingrese un parámetro", 'warning');
                        return;
                    }
                    axios.post(`/Parametros/Bulk`, this.parametros)
                        .then(res => { Swal.fire('Exito', "Parámetros guardados con Éxito", 'success'); this.parametros = res.data; })
                        .catch(e => console.error(e));
                }
            }
        });

    </script>
}