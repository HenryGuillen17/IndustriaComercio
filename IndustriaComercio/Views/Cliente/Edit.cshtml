@using IndustriaComercio.Models.Enum
@using IndustriaComercio.Models.Model

@model ClienteModel

@{
    var isCreated = Model.PersonaId == 0;
}

<div id="app">

    <h2>Editar Cliente</h2>
    <editar-persona ref="editar-persona"></editar-persona>

    <div class="row mt-5 mb-5" v-if="@(isCreated ? "true" : "false")">
        <div class="col-sm-8">
            <h3>Buscar en Base de datos</h3>
            <div class="row">
                <div class="col-sm">
                    <label>Ingrese texto a buscar:</label> <br />
                    <v-select ref="select"
                              label="Value"
                              v-bind:filterable="false"
                              v-on:search="getData"
                              v-on:input="setSelected"
                              v-bind:options="options">
                        <template slot="no-options">
                            -- Sin Opciones --
                        </template>
                    </v-select>
                </div>
                <div class="col-sm">
                    <label>Buscar por: </label><br />
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" id="nombre-completo" name="tipo-busqueda" value="@((int)TipoBusqueda.PorNombreCompleto)" v-model="tipoBusqueda" checked>
                        <label class="form-check-label" for="nombre-completo">Nombre Completo</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" id="cedula" name="tipo-busqueda" value="@((int)TipoBusqueda.PorCedula)" v-model="tipoBusqueda">
                        <label class="form-check-label" for="cedula">Cédula</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <h3>O Crear en Base de datos</h3>
            <button type="button" class="btn btn-primary" v-on:click="editarPersona">Crear</button>
        </div>
    </div>

    <!-- -->
    <template v-if="personaId != 0">
        <div class="row mt-5 mb-5">
            <div class="col-6">
                <label>Nombre Completo:</label><br />
                <h4>{{ form.NombreCompleto }}</h4>
            </div>
            <div class="col-4">
                <label>Identificación:</label><br />
                <h4>{{ form.NoIdentificacionCompleto }}</h4>
            </div>
            <div class="col-2">
                <button class="btn btn-primary" v-on:click="editarPersona">Editar</button>
            </div>
        </div>
        <div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="Nota">Nota</label>
                    <input type="text" class="form-control" id="Nota" name="Nota" placeholder="Ingrese Nota" v-model="form.Nota" v-validate="'required'">
                    <div class="invalid-feedback">{{ errors.first('Nota') }}</div>
                </div>
                <div class="form-group col-md-6">
                    <label for="NumeroEstablecimientos">Número de Establecimientos</label>
                    <input type="number" min="1" class="form-control" id="NumeroEstablecimientos" name="NumeroEstablecimientos" v-model="form.NumeroEstablecimientos" v-validate="'required|between:1,999'">
                    <div class="invalid-feedback">{{ errors.first('NumeroEstablecimientos') }}</div>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="NoPlaca">No. Placa</label>
                    <input type="text" class="form-control" id="NoPlaca" name="NoPlaca" placeholder="Ingrese Placa" v-model="form.NoPlaca" v-validate="'required|min:2'">
                    <div class="invalid-feedback">{{ errors.first('NoPlaca') }}</div>
                </div>
                <div class="form-group col-md-6">
                    <label for="RetieneImpIndustriaComercio">¿Retiene Impuestos?</label>
                    <input type="checkbox" class="form-control" id="RetieneImpIndustriaComercio" v-model="form.RetieneImpIndustriaComercio">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="ClasificacionContribuyenteId">Clasificacion Contribuyente</label>
                    <select class="form-control" id="ClasificacionContribuyenteId" v-model="form.ClasificacionContribuyenteId" v-validate="'required'">
                        <option v-bind:value="null">-- Seleccione --</option>
                        <option v-for="(item, index) in comboBox.clasificacionContribuyente" v-bind:value="item.Key">{{ item.Value }}</option>
                    </select>
                    <div class="invalid-feedback">{{ errors.first('ClasificacionContribuyenteId') }}</div>
                </div>
                <div class="form-group col-md-6 d-flex justify-content-center align-items-end">
                    <button type="button" class="btn btn-primary" v-on:click="guardarCliente">Guardar</button>
                </div>
            </div>
        </div>
    </template>

</div>


@section scripts{

    @Html.Partial("../Personas/_Create")

    <script>
        Vue.use(VeeValidate, {
            classes: true,
            classNames: {
                invalid: 'is-invalid'
            }
        })
        Vue.component('v-select', VueSelect.VueSelect)

        var vm = new Vue({
            el: '#app',
            mounted() {
                this.getClasificacionContribuyente();
                this.getCliente();
            },
            created() {
                eventHub.$on('editar-persona:response', this.responsePersona);
            },
            data: {
                options: [],
                tipoBusqueda: @((int)TipoBusqueda.PorNombreCompleto),
                personaId: @(Model.PersonaId),
                comboBox: {
                    clasificacionContribuyente: []
                },
                form: {},
            },
            computed: {
                /*httpOptions(){
                  return {headers: {'Authorization': "my-token"}} //table props -> :http-options="httpOptions"
                },*/
            },
            watch: {
                personaId(val) {
                    if (val == 0) {
                        // Por decidir
                        return;
                    }
                    // Buscar persona con Cliente
                    this.getCliente();
                }
            },
            methods: {
                getClasificacionContribuyente() {
                    axios.get(`/ClasificacionContribuyente/FindAllCb`)
                        .then(x => this.comboBox.clasificacionContribuyente = x.data)
                        .catch(e => console.error(e));
                },
                getCliente() {
                    if (this.personaId == 0)
                        return;

                    axios.get(`/Cliente/FindById/${this.personaId}`)
                        .then(res => this.form = res.data)
                        .catch(e => console.error(e));
                },
                getData(search, loading) {
                    loading(true);
                    this.search(loading, search, this);
                },
                search: _.debounce((loading, search, vm) => {
                    if (search == null || search.length == 0) {
                        loading(false);
                        vm.options = [];
                        return;
                    }
                    let paramsAutocomplete = `limit=5&tipoBusqueda=${vm.tipoBusqueda}&value=`;
                    axios.get(`/Cliente/GetListPersonaSinClienteAutocomplete?${paramsAutocomplete}${search}`)
                        .then(res => {
                            vm.options = res.data;
                            loading(false);
                        })
                        .catch(e => {
                            console.error(e);
                            loading(false);
                        });
                }, 350),
                setSelected(x) {
                    if (x != null) {
                        this.personaId = x.Key;
                    } else {
                        this.personaId = 0;
                    }
                },
                guardarCliente() {
                    // validar
                    this.$validator.validate().then(valid => {
                        if (valid) {
                            // guardamos con ajax
                            axios.post(`/Cliente/Save`, this.form)
                                .then(res =>
                                    Swal.fire("Exito", "Cliente guardado con éxito", "success"))
                                .catch(e => console.error(e));
                        } else {
                            Swal.fire("Advertencia", "Validar formulario", "warning");
                        }
                    });
                },
                editarPersona() {
                    eventHub.$emit("editar-persona:init", this.personaId);
                },
                responsePersona(obj) {
                    // Buscar persona y la monta en el formulario
                    this.personaId = obj;
                }
            }
        })
    </script>

}
